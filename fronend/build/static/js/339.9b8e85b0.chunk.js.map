{"version":3,"file":"static/js/339.9b8e85b0.chunk.js","mappings":"sMAOMA,EAAW,SAACC,GAChB,GAAqB,qBAAVA,EACT,MAAM,IAAIC,UAAU,4BAGtB,GAAc,gBAAVD,EACF,MAAO,YAGT,IAAME,EAAMF,EAAMG,MAAM,wEAExB,IAAKD,EACH,MAAM,IAAIE,MAAM,UAAGJ,EAAK,8BAG1B,IAAMK,EAAI,WAAIC,SAASJ,EAAI,GAAI,IAAIK,SAAS,KACtCC,EAAI,WAAIF,SAASJ,EAAI,GAAI,IAAIK,SAAS,KACtCE,EAAI,WAAIH,SAASJ,EAAI,GAAI,IAAIK,SAAS,KAE5C,MAAO,WAAIF,EAAEK,OAAO,IAAKC,OAAAH,EAAEE,OAAO,IAAEC,OAAGF,EAAEC,OAAO,GAClD,E,mBCpBME,EAAY,WAChB,OAA0BC,EAAAA,EAAAA,UAAS,sBAAnC,eAAOb,EAAP,KAAcc,EAAd,KACMC,GAAMC,EAAAA,EAAAA,aAUZ,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAKH,EAAII,QAAQC,WAAWC,WAC5BC,EAAWC,OACdC,iBAAiBN,GACjBO,iBAAiB,oBACpBX,EAASQ,EACV,GAAE,CAACP,KAGF,kBAAOW,UAAU,cAAcX,IAAKA,EAApC,UACE,8BACE,2BACE,eAAIW,UAAU,uBAAd,mBACA,eAAIA,UAAU,mBAAd,SAAkC3B,EAASC,SAE7C,2BACE,eAAI0B,UAAU,uBAAd,mBACA,eAAIA,UAAU,mBAAd,SAAkC1B,WAK3C,EAEK2B,EAAa,SAAC,GAA6B,IAA3BD,EAA0B,EAA1BA,UAAWE,EAAe,EAAfA,SACzBC,EAAUC,IAAWJ,EAAW,iCACtC,OACE,UAAC,KAAD,CAAMK,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGR,UAAU,OAA7C,WACE,gBAAKA,UAAWG,EAASM,MAAO,CAAEC,WAAY,SAC7CR,GACD,SAAChB,EAAD,MAGL,EAgDD,EAzCe,WACb,OACE,+BACE,UAAC,KAAD,CAAOc,UAAU,OAAjB,WACE,UAAC,KAAD,2BAEE,SAAC,KAAD,CAAUW,KAAK,iDAEjB,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAACV,EAAD,CAAYD,UAAU,aAAtB,UACE,mDAEF,SAACC,EAAD,CAAYD,UAAU,eAAtB,UACE,qDAEF,SAACC,EAAD,CAAYD,UAAU,aAAtB,UACE,mDAEF,SAACC,EAAD,CAAYD,UAAU,YAAtB,UACE,kDAEF,SAACC,EAAD,CAAYD,UAAU,aAAtB,UACE,mDAEF,SAACC,EAAD,CAAYD,UAAU,UAAtB,UACE,gDAEF,SAACC,EAAD,CAAYD,UAAU,WAAtB,UACE,iDAEF,SAACC,EAAD,CAAYD,UAAU,UAAtB,UACE,wDAOb,C","sources":["../node_modules/@coreui/utils/src/rgbToHex.ts","modules/core-ui/views/theme/colors/Colors.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (__COREUI_VERSION__): rgbToHex.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst rgbToHex = (color: string) => {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined')\n  }\n\n  if (color === 'transparent') {\n    return '#00000000'\n  }\n\n  const rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)\n\n  if (!rgb) {\n    throw new Error(`${color} is not a valid rgb color`)\n  }\n\n  const r = `0${parseInt(rgb[1], 10).toString(16)}`\n  const g = `0${parseInt(rgb[2], 10).toString(16)}`\n  const b = `0${parseInt(rgb[3], 10).toString(16)}`\n\n  return `#${r.slice(-2)}${g.slice(-2)}${b.slice(-2)}`\n}\n\nexport default rgbToHex\n","import PropTypes from \"prop-types\";\nimport React, { useEffect, useState, createRef } from \"react\";\nimport classNames from \"classnames\";\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from \"@coreui/react\";\nimport { rgbToHex } from \"@coreui/utils\";\nimport { DocsLink } from \"../../../components\";\n\nconst ThemeView = () => {\n  const [color, setColor] = useState(\"rgb(255, 255, 255)\");\n  const ref = createRef();\n\n  useEffect(() => {\n    const el = ref.current.parentNode.firstChild;\n    const varColor = window\n      .getComputedStyle(el)\n      .getPropertyValue(\"background-color\");\n    setColor(varColor);\n  }, [ref]);\n\n  return (\n    <table className=\"table w-100\" ref={ref}>\n      <tbody>\n        <tr>\n          <td className=\"text-medium-emphasis\">HEX:</td>\n          <td className=\"font-weight-bold\">{rgbToHex(color)}</td>\n        </tr>\n        <tr>\n          <td className=\"text-medium-emphasis\">RGB:</td>\n          <td className=\"font-weight-bold\">{color}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nconst ThemeColor = ({ className, children }) => {\n  const classes = classNames(className, \"theme-color w-75 rounded mb-3\");\n  return (\n    <CCol xs={12} sm={6} md={4} xl={2} className=\"mb-4\">\n      <div className={classes} style={{ paddingTop: \"75%\" }}></div>\n      {children}\n      <ThemeView />\n    </CCol>\n  );\n};\n\nThemeColor.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\nconst Colors = () => {\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          Theme colors\n          <DocsLink href=\"https://coreui.io/docs/utilities/colors/\" />\n        </CCardHeader>\n        <CCardBody>\n          <CRow>\n            <ThemeColor className=\"bg-primary\">\n              <h6>Brand Primary Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-secondary\">\n              <h6>Brand Secondary Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-success\">\n              <h6>Brand Success Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-danger\">\n              <h6>Brand Danger Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-warning\">\n              <h6>Brand Warning Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-info\">\n              <h6>Brand Info Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-light\">\n              <h6>Brand Light Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-dark\">\n              <h6>Brand Dark Color</h6>\n            </ThemeColor>\n          </CRow>\n        </CCardBody>\n      </CCard>\n    </>\n  );\n};\n\nexport default Colors;\n"],"names":["rgbToHex","color","TypeError","rgb","match","Error","r","parseInt","toString","g","b","slice","concat","ThemeView","useState","setColor","ref","createRef","useEffect","el","current","parentNode","firstChild","varColor","window","getComputedStyle","getPropertyValue","className","ThemeColor","children","classes","classNames","xs","sm","md","xl","style","paddingTop","href"],"sourceRoot":""}